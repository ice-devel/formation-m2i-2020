security:
    encoders:
        # this internal class is used by Symfony to represent in-memory users
        Symfony\Component\Security\Core\User\User: 'plaintext'

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        account_users:
            memory:
                users:
                    admin: { password: 'pass', roles: ['ROLE_ADMIN'] }
                    user: { password: 'user', roles: ['ROLE_USER'] }
                    superadmin: { password: 'pass', roles: ['ROLE_SUPER_ADMIN'] }

    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        account:
            pattern: ^/espace-perso/
            anonymous: true
            form_login:
                provider: account_users
                login_path: /espace-perso/login
                check_path: /espace-perso/login-check
                default_target_path: /espace-perso/login
            logout:
                path: /espace-perso/logout
                target: /espace-perso/login
        main:
            anonymous: lazy

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/espace-perso/login_check, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/espace-perso/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/espace-perso/, roles: ROLE_USER }
